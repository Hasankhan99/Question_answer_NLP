from apartment_price_system_update.main_qa import  aps
import datetime
from question_answer_version02.main_qa import chatgpt,get_aks_doc,get_conversation_history,translate
import dotenv
import os
import requests


def send_slack_message(error, user_query):
    """
    Sends a message to a Slack channel with the error and user query.

    Args:
        error (str): The error message to send.
        user_query (str): The user query that caused the error.

    Returns:
        None
    """
    message = f"In Metastar user faced problem in answer please check team AI,\n Error: {error} \n User Query: {user_query}"
    payload = {"text": message}
    dotenv.load_dotenv()
    slack_channel = os.getenv("aparmentpriceandeducationai")
    requests.post(slack_channel, json=payload)



def predict(text):
    """
    This function takes in a text input and returns a response generated by the chatgpt model after processing the input through various functions.
    
    Args:
    text (str): The input text to be processed by the chatgpt model.
    
    Returns:
    str: The response generated by the chatgpt model after processing the input text.
    
    Raises:
    Exception: If there is an error while processing the input text, an exception is raised and logged in the error_log.txt file.
    """
    try:
        docs_output = get_aks_doc(text)
        history_output = get_conversation_history(text)
        aps_info=aps(text)
        response = chatgpt(text, history_output, docs_output,aps_info)
        response=translate(response,text)
        return response
    except Exception as e:
        with open("question_answer_version02/error_log.txt","a") as f:
            f.write(str(e))
            f.write(f"time: {datetime.datetime.now()} \n")
        response="Sorry, this link is temperorily unavailable due to traffice but we will be available soon."
        send_slack_message(e,text)
        response=translate(response,text)
        return response


from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


class Question(BaseModel):
    message: str

@app.post("/ai_api/ms_qa/")
def qa(body: Question):
    return {"response": predict(body.message)}
    
    


